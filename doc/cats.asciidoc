Category Theory abstractions for Clojure
========================================
Andrey Antukh & Alejandro GÃ³mez
0.1.0, 2014-06-06

:toc:

image:static/logo/logo.png[cats logo]

Introduction
------------

Category Theory abstractions for Clojure.


Philosophy
~~~~~~~~~

Four most important rules:

- Beautiful is better than ugly
- Explicit is better than implicit
- Simple is better than complex
- Readability counts


Project Maturity
----------------

Since _cats_ is a young project there can be some link:codox/index.html#id[API]
breakage.


Install
-------

This section covers installing _cats_.


Requirements
~~~~~~~~~~~~

_cats_ has support for these jvm versions:

- JDK7
- JDK8


Leiningen
~~~~~~~~~

The simplest way to use _cats_ in a Clojure project is by including
it as a dependency in your *_project.clj_*:

._in project.clj_
[source,clojure]
----
[cats "0.1.0-SNAPSHOT"]
----

Maven
~~~~~

Also, you can use it with maven. First, add the clojars repository:

[source,xml]
----
<repository>
    <id>clojars.org</id>
    <url>http://clojars.org/repo</url>
</repository>
----

Then for cats:

[source,xml]
----
<dependency>
    <groupId>cats</groupId>
    <artifactId>cats</artifactId>
    <version>0.1.0-SNAPSHOT</version>
</dependency>
----


Get the Code
~~~~~~~~~~~~

_cats_ is opensource and is entirely developed on link:https://github.com/niwibe/cats[github].

You can clone the public repository with this command:

[source,text]
----
git clone https://github.com/niwibe/cats
----


Why another library?
--------------------

Because cats library:

- targets both most used clojure implementations:  *Clojure (jvm)* and *ClojureScript(js)*
- targets to have the most simple implementation for supported abstractions.
- targets to have more abstractions that simple monad.
- has documentation as first class citizen.
- licensed under permisive license (in comparison with other libraries): BSD (2-Clause)

With differences with other existing libraries:

- The official monads library `algo.monads` is very good, but its approach for modeling
  is slighty limited (as example, you always should specify that monad you want use instead
  relying on the type). And obviously because it only has monads.
- Fluokitten is the best library that we found, but the future of it is uncertain. One big
  difference with fluokitten library is that `cats` not intends extend every clojure type
  with monadic protocols, for obvious reason of monad, functor and applicative represents
  context/wrapper type and it not make sense implement Functor protocol for `java.lang.String`.
- `bwo/monads` is the last monads library. It is completely undocumented and its implementation
  has much innecesary complexity.


Abstractions Reference
----------------------

Functor
~~~~~~~

The Functor represents some sort of "computational context".

.Functor protocol
[source, clojure]
----
(defprotocol Functor
  (fmap [fv f]
    "Applies function f to the value(s) inside
    the context of the functor fv."))
----

`fmap` takes one wrapped value in functor context fv (ex: `Just 2`) and plain function,
unwraps the value and apply a function to plain value returning it wrapped in a new context
of *the same type* of the first argument.

Some examples can explain it better:

[source, clojure]
----
(require '[cats.core :refer :all])
(require '[cats.types :refer :all])

(fmap inc (just 1))
;; => #<Just [2]>
----

Same example but applying function over Nothing:

[source, clojure]
----
(fmap inc (nothing))
;; => #<Nothing >
----

[NOTE]
====
The real fmap signature is `(a -> b) -> f a -> f b` that can be traslated to clojure `[f fv]`.

The changed order on protocol parameters definition is required because of clojure's protocols
limitation that only allow dispatching on first argument.

You should never use protocol function directly. For it, `cats.core/fmap` exists, and it has
the correct signature.

All examples of this documentation uses `cats.core/fmap` instead of function defined in the
protocol.
====


Some of native clojure types, like Vector, also implements the Functor protocol and can
work like functor context/container:

[source, clojure]
----
(fmap inc [1 2 3])
;; => [2 3 4]
----

The main difference of previous example with default clojure map, is that the clojure
map works with seqs and it not respects the input container:

[source, clojure]
----
(map inc [1 2 3])
;; => (2 3 4)
----

You can see more information and examples of clojure types that implements this protocol
on the last section of this documentation.


Applicative Functor
~~~~~~~~~~~~~~~~~~~

Represents an abstraction lying in between Functor and Monad in expressivity.

.Applicative protocol
[source, clojure]
----
(defprotocol Applicative
  (fapply [af av]
    "Applies the function(s) inside ag's context to the value(s)
     inside av's context while preserving the context.")
  (pure [ctx v]
    "Takes any context monadic value ctx and any value v, and puts
     the value v in the most minimal context of same type of ctx"))
----

With the same idea of data inside a context (like `Functor`), what is happens if a wrapped value is
one function/computation? Applicative functors works like plain functors but additionally
can apply function wrapped in some context similar to input value.

Let see one example:

[source, clojure]
----
(defn make-greeter
  [^String lang]
  (condp = lang
    "es" (just (fn [name] (str "Hola " name)))
    "en" (just (fn [name] (str "Hello " name)))
    (nothing)))

(fapply (make-greeter "es") (just "Alex"))
;; => #<Just [Hola Alex]>

(fapply (make-greeter "en") (just "Alex"))
;; => #<Just [Hello Alex]>

(fapply (make-greeter "it") (just "Alex"))
;; => #<Nothing >
----

Moreover, applicative functor protocol comes with an other function: `pure`. The main purpose of
it, is given any value in a context and new value, wraps the new value in a minimal context of same
type as first argument.

To understand it better, see some examples:

[source, clojure]
----
(pure (just 1) 5)
;; => #<Just [5]>

(pure (right :foo) :bar)
;; => #<Either [:bar :right]>
----

The real purpose of this function you will see in a following `Monad` section.


Monad
~~~~~

Monads are the most discussed programming concept to come from category theory. Like functors and
applicatives, monads deal with data in contexts.

Additionaly, monads can also transform context by unwrapping data, applying functions to it and
put new value in a completely different context.

.Monad protocol
[source, clojure]
----
(defprotocol Monad
  "Incomplete monad type definition."
  (bind [mv f] "Applies the function f to the value(s) inside mv's context."))
----

NOTE: In diference with haskel type class, _cats_ protocol only defines one method: `bind`. Other
related methods like `return` are defined as auxiliar functions in `cats.core` namespace.

`bind` function, takes a monadic value (any container that implements a `Monad` protocol) and one
function, applies the function with unwrapped value as first parameter and return a result. In this
case, is a function respoisability of function wrap the result in a corresponding context.

One of the key features of bind function, that everythig insined a monad context known the context
type. Having this, if you apply some computation over a monad and you want return the result
in the same container context but you don't know that contaier is it, you can use `return` or `pure`
function for it.

[source, clojure]
----
(bind (just 1) (fn [v] (return (inc v))))
;; => #<Just [2]>
----

`return` or `pure` function with one argument, try takes a context value from dynamic scope collected
internaly by `bind` function, so that, you can not use them with one argument out of `bind` context.

And finally, for make more powerful monadic compositions, _cats_ comes with `mlet` macro that
if you coming from haskell, represents a `do-syntax`:

[source, clojure]
----
(mlet [x (just 1)
       y (just 2)
       z (just (+ x y))]
  (return z))
;; => #<Just [3]>
----

If you want to use regular (non-monadic) let bindings inside a `mlet` block, you can do so using `:let` and a bindings vector as a pair inside the mlet bindings:

[source, clojure]
----
(mlet [x (just 1)
       y (just 2)
       :let [z (+ x y)]]
  (return z))
;; => #<Just [3]>
----

MonadZero
~~~~~~~~~

The link:http://www.haskell.org/haskellwiki/MonadPlus_reform_proposal#MonadZero[MonadZero] protocol represents a monad that has a notion of an identity element.

.MonadZero protocol
[source, clojure]
----
(defprotocol MonadZero
  "A `Monad` that supports the notion of an identity element."
  (mzero [ctx] "The identity element for `ctx`."))
----

The `bind` operation on the identity element satisfies Left Zero:

[source, clojure]
----
(mzero (just 1))
;; => #<Nothing >

(= (mzero (just 1))
   (>>= (mzero (just 1)) just))
;; => true
----

When a monad instance implements the MonadZero protocol, `:where` clauses can be used in `mlet` bindings:

[source, clojure]
----
(mlet [i [1 2 3 4 5]
       :where (> i 2)]
      (return i))
;; => [3 4 5]

(mlet [i (t/just 2)
       :where (> i 2)]
      (m/return i))
;; => #<Nothing >
----

MonadPlus
~~~~~~~~~

The link:http://www.haskell.org/haskellwiki/MonadPlus_reform_proposal#MonadPlus[MonadPlus] protocol represents a MonadZero wich has a plus operation.

.MonadPlus protocol
[source, clojure]
----
(defprotocol MonadPlus
  "A `MonadZero` that supports the notion of addition."
  (mplus [mv mv'] "An associative addition operation."))
----

`mplus` is an associative binary operation for which the value that `mzero` gives is the identity element. The `mplus` version contained in the core namespace is variadic.

[source, clojure]
----
(require '[cats.types :refer [just nothing]])
(require '[cats.core :refer [mplus]])

(mplus [1 2 3] [4 5 6] [7 8])
;; => [1 2 3 4 5 6 7 8]

(mplus (nothing))
;; => #<Nothing >

(mplus (nothing) (just 42))
;; => #<Just [42]>

(mplus (nothing) (just 42) (just 3))
;; => #<Just [42]>
----


Data Types Reference
--------------------

We talked about values in a context, but that is a context? Context per se is any value that
wraps an other value inside.

Maybe
~~~~~

Two most common wrapper is "Maybe" (commonly named Optional on not functional programming
languages).

Maybe/Optional is a polymorphic type that represents encapsulation of an optional value; e.g. it is
used as the return type of functions which may or may not return a meaningful value when they
are applied. It consists of either an empty constructor (called None or Nothing), or a constructor
encapsulating the original data type A (written Just A or Some A).

_cats_, implements two constructors:

- `(just v)`: represents just a value in a context.
- `(nothing)`: represents a failure or null.


[source, clojure]
----
(require '[cats.types :refer :all])
(just 1)
;; => #<Just [1]>
(nothing)
;; => #<Nothing >
----

NOTE: Maybe types are: Functors, Applicative Functors and Monads


Either
~~~~~~

Either is an other type that represents a result of computation, but in contrast with maybe
it can return something with failed computation result.

In _cats_ library it has two constructors:

- `(left v)`: represents a failure.
- `(right v)`: represents a successful result.

[source, clojure]
----
(require '[cats.types :refer :all])

(right :valid-value)
;; => #<Right [:valid-value :right]>

(left "Error message")
;; => #<Either [Error message :left]>
----

NOTE: Either is also (like Maybe) Functor, Applicative Functor and Monad.

Clojure Types
-------------

Besides the own types, some colojure types has implementations for previously explained
category theory abstractions.

NOTE: With contrast with other similar libraries in clojure, _cats_ not intends extend clojure types
that not acts like containers. As example, clojure keywords are values but can not be containers, so
that, their should not extend previously explained protocols.

Vector
~~~~~~

TODO

List
~~~~

TODO

Set
~~~

TODO


License
-------

[source,text]
----
Copyright (c) 2014, Andrey Antukh
Copyright (c) 2014, Alejandro GÃ³mez

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
----
