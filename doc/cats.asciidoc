Category Theory abstractions for Clojure
========================================
Andrey Antukh & Alejandro GÃ³mez
0.2.0, 2014-07-15

:toc:

image:static/logo/logo.png[cats logo]

Introduction
------------

Category Theory abstractions for Clojure.


Philosophy
~~~~~~~~~

Four most important rules:

- Beautiful is better than ugly
- Explicit is better than implicit
- Simple is better than complex
- Readability counts

Why another library?
~~~~~~~~~~~~~~~~~~~~

Because cats library:

- targets both most used clojure implementations:  *Clojure (jvm)* and *ClojureScript(js)*
- aims to have the most simple implementation for supported abstractions.
- aims to have more abstractions that are simple monads.
- has documentation as first class citizen.
- licensed under a permissive license (compared to other libraries): BSD (2-Clause)

This is an incomplete list of differences with other existing libraries:

- The official monads library `algo.monads` is very good, but its approach for modeling
  is slighty limited (e.g. you always need to specify what monad you want use instead of
  relying on the type). And obviously because it only has monads.
- Fluokitten is the best library that we found, but the future of it is uncertain. One big
  difference with fluokitten is that `cats` doesn't aim to extend every clojure type
  with monadic protocols, for the obvious reason that monad; functor and applicative represents
  context/wrapper types and it doesn't make sense to implement Functor protocol for `java.lang.String`.
- `bwo/monads` is the last monads library. It is completely undocumented and its implementation
  has much unnecesary complexity.


Project Maturity
~~~~~~~~~~~~~~~~

Since _cats_ is a young project there can be some link:codox/index.html#id[API] breakage.


Install
-------

This section covers installing _cats_.


Leiningen
~~~~~~~~~

The simplest way to use _cats_ in a Clojure project is by including
it as a dependency in your *_project.clj_*:

[source,clojure]
----
[cats "0.2.0-SNAPSHOT"]
----


Maven
~~~~~

Also, you can use it with maven. First, add the clojars repository:

[source,xml]
----
<repository>
    <id>clojars.org</id>
    <url>http://clojars.org/repo</url>
</repository>
----

Then for cats:

[source,xml]
----
<dependency>
    <groupId>cats</groupId>
    <artifactId>cats</artifactId>
    <version>0.2.0-SNAPSHOT</version>
</dependency>
----


Get the Code
~~~~~~~~~~~~

_cats_ is opensource and is entirely developed on link:https://github.com/niwibe/cats[github].

You can clone the public repository with this command:

[source,text]
----
git clone https://github.com/niwibe/cats
----


User Guide
----------

This section introduces almost all category theory abstractios that cats library
supports.

And for it, we are using _Maybe_ type for all examples beacuse that type implements
all protocols. You can read more about it in the next section.


Functor
~~~~~~~

Let start with functor. The Functor represents some sort of "computational context", and the
abstraction consists in one unique function: **fmap**.

.Signature of **fmap** function
[source, clojure]
----
(fmap [f fv])
----

**fmap** takes a plain function as first parameter and and value wrapped in functor
context/wrapper. It, extracts the inner value apply the function to it, and return
the result wrapped in same type as the second parameter.

But, what is the **functor context wrapper*? It sonds more complex that it is. Functor
wrapper is any type that acts as "Box" and implements the `Context` and `Functor` protocol.

One good example of functor wrapper is the **Maybe** type:

[source, clojure]
----
(require '[cats.monad.maybe :as maybe])

(maybe/just 2)
;; => #<Just [2]>
----

**just** is one of two constructors of **Maybe** type and it's only wraps the real
value. Now, let see one example using **fmap** over **just** instance:

[source, clojure]
----
(require '[cats.core :as m])

(m/fmap inc (just 1))
;; => #<Just [2]>
----

But **Maybe** has another constructor: `maybe/nothing`. This constructor makes
empty object that not wraps anything. It represents the failure. Is the safe
substitute of `nil` and represents the failure.

Let see that is happens if we make same operation of previous example over
*nothing* instance:

[source, clojure]
----
(fmap inc (nothing))
;; => #<Nothing >
----

Oh, awesome, instead of raising null pointer exception, it just return *nothing*.


An other good advantage of use functor abstraction, is that it always return result
in the same type of second argument

Let see one example of apply fmap over clojure vector:

[source, clojure]
----
(fmap inc [1 2 3])
;; => [2 3 4]
----

The main difference compared to the previous example with default clojure map, is that the clojure
map works with seqs and doesn't respect the input container:

[source, clojure]
----
(map inc [1 2 3])
;; => (2 3 4)
----

But why fmap works with vectors? Because some "container" types of clojure like vectors,
lists or sets also implements the functor abstraction.


Applicative
~~~~~~~~~~~

Let continue with applicative function. The Applicative Functor represents
some sort of "computational context" like plain Functor, but with abilty of
execute a function wrapped in same context.

Applicative Functor abstraction consists in two functions: **fapply** and
**pure**.

.Signature of **fapply** function
[source, clojure]
----
(fapply [af av])
----

NOTE: **pure** function it will be explained later.

The use case of Applicative Functors is much same as of plain Functors: safe
evaluation of some computation in a context.

Let see one exaple for understand better the differences between functor and
applicative functor:

Imagine, you have some factory function that depending of language, return a
greater function and you only has support for few languages.


[source, clojure]
----
(defn make-greeter
  [^String lang]
  (condp = lang
    "es" (fn [name] (str "Hola " name))
    "en" (fn [name] (str "Hello " name))
    nil))
----

Now, if you want to use it, you should always defensively check if returned
greater is a valid function or is a nil value.

Lets go to convert this factory to use Maybe type:

[source, clojure]
----
(defn make-greeter
  [^String lang]
  (condp = lang
    "es" (just (fn [name] (str "Hola " name)))
    "en" (just (fn [name] (str "Hello " name)))
    (nothing)))
----

As you can observe, this version of factory differs little bit from the
original implementation. And this little change makes you superpower: you
can apply the returned greater to any value without defensive nil checking:

[source, clojure]
----
(fapply (make-greeter "es") (just "Alex"))
;; => #<Just [Hola Alex]>

(fapply (make-greeter "en") (just "Alex"))
;; => #<Just [Hello Alex]>

(fapply (make-greeter "it") (just "Alex"))
;; => #<Nothing >
----

Moreover the applicative functor comes with **pure** function, and main purpose of this function is
put some value in side effect free contex of the current type.

Examples:

[source, clojure]
----
(require '[cats.monad.maybe])
(require '[cats.monad.either])

(pure maybe/maybe-monad 5)
;; => #<Just [5]>

(pure either/either-monad :bar)
;; => #<Either [:bar :right]>
----

If you not understand the purpose of **pure** function, it is possible that the next section
can clarify the real purpose of it.


Monad
~~~~~

Monads are the most discussed programming concept to come from category theory. Like functors and
applicatives, monads deal with data in contexts.

Additionaly, monads can also transform context by unwrapping data, applying functions to it and
put new values in a completely different context.

The monad abstraction consists on two functions: **bind** and **return**

**bind** function has the following signature:

[source,clojure]
----
(bind [mv f])
----

Let see one example:

[source,clojure]
----
(bind (just 1)
      (fn [v] (just (inc v))))
----

As you can observe, it works much like Functor but with inverted arguments, the main deference is
that in monad, the function is a responsible of wrapping a retuned value in a context.

One of the key features of the bind function is that any computation executed inside of context of
bind (monad) knows the context type implicitly. Having this, if you apply some computation over some
monadic value  and you want to return the result in the same container context but you don't know
that container is it, you can use `return` or `pure` functions:

[source,clojure]
----
(bind (just 1)
      (fn [v]
        (return (inc v))))
;; => #<Just [2]>
----

The `return` or `pure` functions, when called with one argument, try to use the dynamic scope context
value that's set internally by the `bind` function. Therefore you can't use them with one argument out
of a `bind` context.

At this time, everything is fine, we not can compose any number of computations using monad **bind*
functions. But that is happens where the number of computations increases:

[source, clojure]
----
(bind (just 1)
      (fn [a]
        (bind (just (inc a))
              (fn [b]
                (return (* b 2))))))
----

This easy grows to very beatiful callback hell. For solve this, _cats_ comes with powerful
macro: **mlet**

NOTE: If you are coming from haskell, it represents the `do-syntax` of haskell.

Let see the same example but translated to more clear code using mlet macto:

[source, clojure]
----
(mlet [a (just 1)
       b (just (inc b))]
  (return (* b 2)))
----

If you want to use regular (non-monadic) let bindings inside a `mlet` block, you can do so using
`:let` and a bindings vector as a pair inside the mlet bindings:

[source, clojure]
----
(mlet [a (just 1)
       b (just (inc b))
       :let [z (+ a b)]]
  (return (* z 2)))
----


Monad types
^^^^^^^^^^^

Monad as is, is an abstraction, and we have seen two types in examples that implements
the monad abstraction: Maybe and Either. But they are the smallest part of types
that implements the Monad abstraction. In this section we try explain different
monad types supported by _cats_ library.

Maybe
+++++

This is one of the two most used monad types (commonly named Optional in non-functional programming
languages).

Maybe/Optional is a polymorphic type that represents encapsulation of an optional value; e.g. it is
used as the return type of functions which may or may not return a meaningful value when they
are applied. It consists of either an empty constructor (called None or Nothing), or a constructor
encapsulating the original data type A (written Just A or Some A).

_cats_, implements two constructors:

- `(just v)`: represents just a value in a context.
- `(nothing)`: represents a failure or null.


[source, clojure]
----
(require '[cats.monad.maybe :refer :all])
(just 1)
;; => #<Just [1]>
(nothing)
;; => #<Nothing >
----

NOTE: Maybe types are: Functors, Applicative Functors and Monads

Either
++++++

Either is another type that represents a result of computation, but in contrast with maybe
it can return some data with a failed computation result.

In _cats_ it has two constructors:

- `(left v)`: represents a failure.
- `(right v)`: represents a successful result.

[source, clojure]
----
(require '[cats.monad.either :refer :all])

(right :valid-value)
;; => #<Right [:valid-value :right]>

(left "Error message")
;; => #<Either [Error message :left]>
----

NOTE: Either is also (like Maybe) Functor, Applicative Functor and Monad.

State
+++++

State monad in one of the special use cases of monads most used in haskell. It has different
purposes including: lazy computation composition and maintaining state without explicit state.

The de facto monadic type of the state monad is a plain function. Function represents a computation
as is (without executing it). Obviously, a function should have some special characteristics to work
in monad state composition.

.Valid function for valid state monad
[source, clojure]
----
(fn [state]
  "Takes state as argument and return a vector
  with first argument with procesed value and
  second argument the transformed new state."
  (let [newvalue (first state)
        newstate (next state)]
    [newvalue newstate]))
----

Right, you just saw an example of the low level primitive of state monad but for basic usage
you do not need to build your own functions, just use some helpers that _cats_ gives you.

Let's look at one example before explaining the details:

.Lazy composition of computations
[source, clojure]
----
(m/mlet [state (m/get-state)
         _     (m/put-state (next state))]
  (return (first state)))
;;=> #<State cats.monad.state.State@2eebabb6>
----

At the moment of evaluating the previous expression, anything that we have defined
is executed. Instead of the finished value of the computation, a strange/unknown object is returned of type *State*.

State is a simple wrapper for clojure functions, nothing more.

Now, it time to execute the composed computation, for this we can use one of the following
functions exposed by _cats_: `run-state`, `eval-state` and `exec-state`.

- `run-state` function executes the composed computation and returns both the value and the
  result state.
- `eval-state` function executes the composed computation and returns the resulting value
  discarding the state.
- `exec-state` function executes the composed computation and return only the resulting
  state, ignoring the resulting value.

.This is what happens when we execute these three functions over previously generated `State` instance
[source, clojure]
----
(m/run-state s [1 2 3])
;;=> #<Pair [1 (2 3)]>
(m/eval-state s [1 2 3])
;;=> 1
(m/exec-state s [1 2 3])
;;=> (2 3)
----

NOTE: the pair instance returned by `run-state` functions works like any other seq of clojure, with
the difference that pairs can only have two slots.

This is a very basic example of the state monad, it has a lot of use cases and explaining all them
seems out of the scope of this document.

However, if you have better examples to explain the state monad, documentation for another monad or
any other contribution is always welcome.


Reader
++++++

TODO

Writer
++++++

TODO

Continuation
++++++++++++

TODO

Lazy
++++

TODO

Vector
++++++

TODO

Monad Transformers
^^^^^^^^^^^^^^^^^^

Motivation
+++++++++++

We can combine two functors and get a new one automatically. Given any two functors _a_ and _b_,
we can implement a generic `fmap` for the type _a (b Any)_, we'll call it fmap2:

[source, clojure]
----
(ns functor.example
  (:require [[cats.core :refer [fmap]]
             [cats.monad.maybe :refer [just]]])
  (:use [cats.builtin]))

(defn fmap2
  [f fv]
  (fmap (partial fmap f) fv))

; Here, 'a' is [] and 'b' is Maybe, so the type of the
; combined functor is a vector of Maybe values that could
; contain a value of any type.
(fmap2 inc [(maybe/just 1) (maybe/just 2)])
;;=> [#<Just [2]> #<Just [3]>]
----

However, monads don't compose as nicely as functors do. We have to actually implement
the composition ourselves.

In some circumstances we would like combine the effects of two monads in another one. We call the
resulting monad a monad transformer, which is the composition of a "base" and a "inner" monad.

Almost every monad implemented in _cats_ has a monad transformer for combining it with
any other monad.

TODO


Clojure Types
-------------

Besides the own types, some clojure types has implementations for previously explained
category theory abstractions.

NOTE: In contrast to other similar libraries in clojure, _cats_ doesn't intend to extend clojure types
that don't act like containers. For example, clojure keywords are values but can not be containers so
they should not extend any of the previously explained protocols.


.Summary of clojure types and implemented protocols
[options="header"]
|=============================================================
| Name     | Implemented protocols
| vector   | Functor, Applicative, Monad, MonadZero, MonadPlus
| hash-set | Functor, Applicative, Monad, MonadZero, MonadPlus
| list     | Functor, Applicative, Monad, MonadZero, MonadPlus
|=============================================================


License
-------

[source,text]
----
Copyright (c) 2014, Andrey Antukh
Copyright (c) 2014, Alejandro GÃ³mez

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
----
